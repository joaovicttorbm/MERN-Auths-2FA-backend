import { Router } from "express";
import { mfaController } from "./mfa.module";
import { authenticateJWT } from "../../common/strategies/jwt.strategy";

const mfaRoutes = Router();

/**
 * @swagger
 * /mfa/setup:
 *   get:
 *     summary: Generate MFA setup for the user.
 *     description: This endpoint generates a QR code for setting up MFA for the user, if MFA is not already enabled.
 *     security:
 *       - JWT: []
 *     responses:
 *       200:
 *         description: Successful MFA setup generation.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 secretKey:
 *                   type: string
 *                 qrImageUrl:
 *                   type: string
 *       401:
 *         description: Unauthorized access (if the user is not authenticated).
 */
mfaRoutes.get("/setup", authenticateJWT, mfaController.generateMFASetup);

/**
 * @swagger
 * /mfa/verify:
 *   post:
 *     summary: Verify MFA setup for the user.
 *     description: This endpoint verifies the MFA setup by checking the code provided by the user and enabling MFA if the code is correct.
 *     security:
 *       - JWT: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               code:
 *                 type: string
 *                 description: The MFA verification code generated by the user.
 *               secretKey:
 *                 type: string
 *                 description: The MFA secret key associated with the user for validation.
 *     responses:
 *       200:
 *         description: Successful MFA verification and setup.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 userPreferences:
 *                   type: object
 *                   properties:
 *                     enable2FA:
 *                       type: boolean
 *       400:
 *         description: Invalid MFA code or request error.
 *       401:
 *         description: Unauthorized access (if the user is not authenticated).
 */
mfaRoutes.post("/verify", authenticateJWT, mfaController.verifyMFASetup);

/**
 * @swagger
 * /mfa/revoke:
 *   put:
 *     summary: Revoke MFA setup for the user.
 *     description: This endpoint revokes MFA setup for the user by disabling 2FA and removing the associated secret key.
 *     security:
 *       - JWT: []
 *     responses:
 *       200:
 *         description: Successful MFA revocation.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 userPreferences:
 *                   type: object
 *                   properties:
 *                     enable2FA:
 *                       type: boolean
 *       400:
 *         description: Bad request error (e.g., if MFA is not enabled).
 *       401:
 *         description: Unauthorized access (if the user is not authenticated).
 */
mfaRoutes.put("/revoke", authenticateJWT, mfaController.revokeMFA);

/**
 * @swagger
 * /mfa/verify-login:
 *   post:
 *     summary: Verify MFA during user login.
 *     description: This endpoint verifies the MFA code provided by the user during login and returns authentication tokens.
 *     security:
 *       - JWT: []
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               code:
 *                 type: string
 *                 description: The MFA code generated by the user’s authenticator app.
 *               email:
 *                 type: string
 *                 description: The email address of the user attempting to log in.
 *               userAgent:
 *                 type: string
 *                 description: The user’s browser or device information.
 *     responses:
 *       200:
 *         description: Successful MFA verification and login.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Verified & login successfully"
 *                 user:
 *                   type: object
 *                   description: The authenticated user object.
 *       400:
 *         description: Invalid MFA code or bad request.
 *       401:
 *         description: Unauthorized access (e.g., MFA not enabled for the user).
 *       404:
 *         description: User not found.
 */
mfaRoutes.post("/verify-login", mfaController.verifyMFAForLogin);

export default mfaRoutes;
